import { createAction } from 'redux-actions';

import {
  fetchPhones as fetchPhonesApi,
  loadMorePhones as loadMorePhonesApi,
  fetchPhoneById as fetchPhoneByIdApi,
  fetchCategories as fetchCategoriesApi,
} from 'api';

import { getRenderedPhonesLength } from 'selectors';

export const fetchPhonesRequest = createAction('PHONES_FETCH_REQUEST');
export const fetchPhonesSuccess = createAction('PHONES_FETCH_SUCCESS');
export const fetchPhonesFailure = createAction('PHONES_FETCH_FAILURE');

export const loadMorePhonesRequest = createAction('LOAD_MORE_PHONES_REQUEST');
export const loadMorePhonesSuccess = createAction('LOAD_MORE_PHONES__SUCCESS');
export const loadMorePhonesFailure = createAction('LOAD_MORE_PHONES_FAILURE');

export const fetchPhoneByIdRequest = createAction('FETCH_PHONE_BY_ID_REQUEST');
export const fetchPhoneByIdSuccess = createAction('FETCH_PHONE_BY_ID_SUCCESS');
export const fetchPhoneByIdFailure = createAction('FETCH_PHONE_BY_ID_FAILURE');

export const fetchCategoriesRequest = createAction('FETCH_CATEGORIES_REQUEST');
export const fetchCategoriesSuccess = createAction('FETCH_CATEGORIES_SUCCESS');
export const fetchCategoriesFailure = createAction('FETCH_CATEGORIES_FAILURE');

export const addPhonesToBasket = createAction('ADD_PHONE_TO_BASKET');
export const phoneSearch = createAction('SEARCH_PHONE');
export const removePhoneFromBasket = createAction('REMOVE_PHONE_FROM_BASKET');
export const cleanBasket = createAction('CLEAN_BASKET');
export const basketCheckout = createAction('BASKET_CHECKOUT');

export const fetchPhones = () => async (dispatch) => {
  dispatch(fetchPhonesRequest());
  try {
    const response = await fetchPhonesApi();
    dispatch(fetchPhonesSuccess({ phones: response }));
  } catch (e) {
    dispatch(fetchPhonesFailure({ e, error: true }));
    throw e;
  }
};

export const loadMorePhones = () => async (dispatch, getState) => {
  const offset = getRenderedPhonesLength(getState());
  dispatch(loadMorePhonesRequest());
  try {
    const response = await loadMorePhonesApi({ offset });
    dispatch(loadMorePhonesSuccess({ phones: response }));
  } catch (e) {
    dispatch(loadMorePhonesFailure({ e, error: true }));
    throw e;
  }
};

export const fetchPhoneById = (id) => async (dispatch) => {
  dispatch(fetchPhoneByIdRequest());
  try {
    const phone = await fetchPhoneByIdApi(id);
    dispatch(fetchPhoneByIdSuccess({ phone }));
  } catch (e) {
    dispatch(fetchPhoneByIdFailure({ e, error: true }));
    throw e;
  }
};

export const addPhoneToBasket = (id) => (dispatch) => {
  dispatch(addPhonesToBasket({ id }));
};

export const fetchCategories = () => async (dispatch) => {
  dispatch(fetchCategoriesRequest());
  try {
    const categories = await fetchCategoriesApi();
    dispatch(fetchCategoriesSuccess({ categories }));
  } catch (e) {
    dispatch(fetchCategoriesFailure({ e, error: true }));
    throw e;
  }
};
