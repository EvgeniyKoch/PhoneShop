import { createSelector } from 'reselect';
import * as R from 'ramda';

const getPhonesByIds = (state) => state.phones.byId;
const getAllIds = (state) => state.phones.allIds;
export const getPhoneById = (state, id) => R.prop(id, state.phones.byId);
const getBasket = (state) => state.basket;
export const getCategories = (state) => state.categories;
export const getActiveCategoryId = (ownProps) => R.path(['match', 'params', 'id'], ownProps);


export const phoneSelector = (state, ownProps) => {
  const activeCategoryId = getActiveCategoryId(ownProps);
  const applySearch = (item) => R.contains(
    state.phones.search,
    item.name,
  );

  const applyCategory = (item) => R.equals(
    activeCategoryId,
    R.prop('categoryId', item)
  );

  const phones = R.compose(
    R.filter(applySearch),
    R.when(R.always(activeCategoryId), R.filter(applyCategory)),
    R.map((id) => getPhoneById(state, id)),
  )(state.phones.allIds);

  return phones;
};

export const getRenderedPhonesLength = createSelector(
  getAllIds,
  (ids) => ids.length,
);

export const getTotalBasketCount = createSelector(
  getBasket,
  (basket) => basket.length,
);

export const getTotalBasketPrice = createSelector(
  getBasket,
  getPhonesByIds,
  (ids, phones) => ids.reduce((total, id) => total + phones[id].price, 0),
);

export const getBasketPhonesWithCount = (state) => {
  const uniqueIds = R.uniq(state.basket);

  const phoneCount = (id) => R.compose(
    R.length,
    R.filter((basketId) => R.equals(id, basketId))
  )(state.basket);

  const phoneWithCount = (phone) => R.assoc('count', phoneCount(phone.id), phone);

  const phones = R.compose(
    R.map(phoneWithCount),
    R.map((id) => getPhoneById(state, id)),
  )(uniqueIds);

  return phones;
};
